#!/usr/bin/env bash
#
# Copyright 2018-2019, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# src/test/util_badblock/TEST8 -- unit test for util_badblock
#                                 - create and open a pool
#                                   on dax device with bad blocks
#

. ../unittest/unittest.sh

require_test_type medium

require_badblock_tests_enabled dax_device
require_linked_with_ndctl ./util_badblock$EXESUFFIX

setup

. ../common_badblock.sh

badblock_test_init dax_device

# create a pool
expect_normal_exit ./util_badblock$EXESUFFIX $FULLDEV r

turn_on_checking_bad_blocks $FULLDEV

# inject bad block: OFF=11 LEN=1
ndctl_inject_error $NAMESPACE 11 1

expect_bad_blocks $NAMESPACE

# open a pool with bad blocks
expect_abnormal_exit ./util_badblock$EXESUFFIX $FULLDEV o

ndctl_uninject_error $FULLDEV $NAMESPACE 11 1

badblock_test_fini

check

pass
