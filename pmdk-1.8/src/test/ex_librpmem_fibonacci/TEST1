#!/usr/bin/env bash
#
# Copyright 2019, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# src/test/ex_librpmem_fibonacci/TEST1 -- fibonacci example unittest
#

. ../unittest/unittest.sh

require_test_type medium

require_nodes 2

require_node_dax_device 0 1
require_node_dax_device 1 1

require_command_node 0 openssl
require_command_node 1 openssl

require_node_libfabric 0 $RPMEM_PROVIDER
require_node_libfabric 1 $RPMEM_PROVIDER

setup

init_rpmem_on_node 1 0

POOLSET=pool.set
node_0_dax=$(get_node_devdax_path 0 0)
node_1_dax=$(get_node_devdax_path 1 0)
RAND_DATA=rand_data

create_poolset $DIR/$POOLSET AUTO:$node_0_dax

copy_files_to_node 0 ${NODE_DIR[0]} $DIR/$POOLSET
DAXIO_OPTS="--clear-bad-blocks=no"
expect_normal_exit run_on_node 0 ../daxio $DAXIO_OPTS -z -o \
	$node_0_dax &>> $PREP_LOG_FILE
expect_normal_exit run_on_node 1 ../daxio $DAXIO_OPTS -z -o \
	$node_1_dax &>> $PREP_LOG_FILE

rm_files_from_node 1 ${NODE_DIR[1]}/../$OUT_LOG_FILE

fibonacci_next()
{
	expect_normal_exit run_on_node 1 "\"./fibonacci \
		${NODE_ADDR[0]} $POOLSET $node_1_dax \
		>> $OUT_LOG_FILE 2>&1\""
}

corrupt_local()
{
	expect_normal_exit run_on_node 1 "\"openssl rand 8192 > $RAND_DATA\""
	expect_normal_exit run_on_node 1 "../daxio $DAXIO_OPTS -o $node_1_dax -i $RAND_DATA -l 8192" &>> $PREP_LOG_FILE
}

corrupt_remote()
{
	expect_normal_exit run_on_node 0 "\"openssl rand 4096 > $RAND_DATA\""
	expect_normal_exit run_on_node 0 "../daxio $DAXIO_OPTS -o $node_0_dax -i $RAND_DATA --seek 4096" &>> $PREP_LOG_FILE
}

# recover from local corruption
fibonacci_next
corrupt_local
fibonacci_next

# recover from remote corruption
corrupt_remote
fibonacci_next

# recover from local and remote corruption (reinit)
corrupt_local
corrupt_remote
fibonacci_next

TEMP=temp.log
run_on_node 1 "mv $OUT_LOG_FILE $TEMP"
# F[5] = ...
# broken local memory pool!
# ...
# F[10] = ...
# broken remote memory pool!
# ...
run_on_node 1 "cat $TEMP | grep -vwE '(Fibonacci|initializing)' > $OUT_LOG_FILE"

check

pass
